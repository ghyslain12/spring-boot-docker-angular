package com.example.backend.service;

import com.example.backend.entity.Material;
import com.example.backend.repository.MaterialRepository;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;

import static org.junit.jupiter.api.Assertions.*;

@SpringBootTest
@Transactional
public class MaterialServiceTest {

    @Autowired
    private MaterialService materialService;

    @Autowired
    private MaterialRepository materialRepository;

    @BeforeEach
    void setUp() {
        materialRepository.deleteAll();
    }

    @Test
    void testGetAllMaterials() {
        Material material = new Material();
        material.setDesignation("TestMaterial");
        materialRepository.save(material);

        List<Material> materials = materialService.getAllMaterials();

        assertEquals(1, materials.size());
        assertEquals("TestMaterial", materials.get(0).getDesignation());
    }

    @Test
    void testGetMaterialById() {
        Material material = new Material();
        material.setDesignation("TestMaterial");
        materialRepository.save(material);

        Material foundMaterial = materialService.getMaterialById(material.getId());

        assertEquals("TestMaterial", foundMaterial.getDesignation());
    }

    @Test
    void testGetMaterialByIdNotFound() {
        Exception exception = assertThrows(RuntimeException.class, () -> {
            materialService.getMaterialById(999);
        });
        assertEquals("Material not found with id: 999", exception.getMessage());
    }

    @Test
    void testCreateMaterial() {
        Material material = new Material();
        material.setDesignation("NewMaterial");

        Material createdMaterial = materialService.createMaterial(material);

        assertNotNull(createdMaterial.getId());
        assertEquals("NewMaterial", createdMaterial.getDesignation());
    }

    @Test
    void testCreateMaterialDuplicateDesignation() {
        Material material = new Material();
        material.setDesignation("TestMaterial");
        materialRepository.save(material);

        Material newMaterial = new Material();
        newMaterial.setDesignation("TestMaterial");

        Exception exception = assertThrows(IllegalArgumentException.class, () -> {
            materialService.createMaterial(newMaterial);
        });
        assertEquals("Un material avec la designation 'TestMaterial' existe déjà.", exception.getMessage());
    }

    @Test
    void testUpdateMaterial() {
        Material material = new Material();
        material.setDesignation("TestMaterial");
        materialRepository.save(material);

        Material materialDetail = new Material();
        materialDetail.setDesignation("UpdatedMaterial");

        Material updatedMaterial = materialService.updateMaterial(material.getId(), materialDetail);

        assertEquals("UpdatedMaterial", updatedMaterial.getDesignation());
    }

    @Test
    void testDeleteMaterial() {
        Material material = new Material();
        material.setDesignation("TestMaterial");
        materialRepository.save(material);

        materialService.deleteMaterial(material.getId());

        assertFalse(materialRepository.findById(material.getId()).isPresent());
    }
}