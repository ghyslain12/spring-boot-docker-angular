package com.example.backend.controller;

import com.example.backend.entity.User;
import com.example.backend.repository.UserRepository;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.MediaType;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.transaction.annotation.Transactional;

import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

@SpringBootTest
@AutoConfigureMockMvc
@ActiveProfiles("test")
@Transactional
public class UserControllerNoAuthTest {

    @Autowired
    private MockMvc mockMvc;

    @Autowired
    private UserRepository userRepository;

    private User testUser;

    @BeforeEach
    void setUp() {
        userRepository.deleteAll();

        testUser = new User();
        testUser.setName("TestUser");
        testUser.setEmail("testuser@example.com");
        testUser.setPassword("password");
        userRepository.save(testUser);
    }

    @Test
    void testGetAllUsersWithoutAuthForbidden() throws Exception {
        mockMvc.perform(get("/api/utilisateur")
                .contentType(MediaType.APPLICATION_JSON))
                .andExpect(status().isForbidden());
    }

    @Test
    void testGetUserByIdWithoutAuthForbidden() throws Exception {
        mockMvc.perform(get("/api/utilisateur/" + testUser.getId())
                .contentType(MediaType.APPLICATION_JSON))
                .andExpect(status().isForbidden());
    }

    @Test
    void testGetUserByIdWithoutAuthNotFoundForbidden() throws Exception {
        mockMvc.perform(get("/api/utilisateur/999")
                .contentType(MediaType.APPLICATION_JSON))
                .andExpect(status().isForbidden());
    }

    @Test
    void testCreateUserWithoutAuthForbidden() throws Exception {
        String newUserJson = "{\"name\":\"NewUser\",\"email\":\"newuser@example.com\",\"password\":\"newpassword\"}";

        mockMvc.perform(post("/api/utilisateur")
                .contentType(MediaType.APPLICATION_JSON)
                .content(newUserJson))
                .andExpect(status().isForbidden());
    }

    @Test
    void testUpdateUserWithoutAuthForbidden() throws Exception {
        String updatedUserJson = "{\"name\":\"UpdatedUser\",\"email\":\"updateduser@example.com\",\"password\":\"updatedpassword\"}";

        mockMvc.perform(put("/api/utilisateur/" + testUser.getId())
                .contentType(MediaType.APPLICATION_JSON)
                .content(updatedUserJson))
                .andExpect(status().isForbidden());
    }

    @Test
    void testUpdateUserWithoutAuthNotFoundForbidden() throws Exception {
        String updatedUserJson = "{\"name\":\"UpdatedUser\",\"email\":\"updateduser@example.com\",\"password\":\"updatedpassword\"}";

        mockMvc.perform(put("/api/utilisateur/999")
                .contentType(MediaType.APPLICATION_JSON)
                .content(updatedUserJson))
                .andExpect(status().isForbidden());
    }

    @Test
    void testDeleteUserWithoutAuthForbidden() throws Exception {
        mockMvc.perform(delete("/api/utilisateur/" + testUser.getId())
                .contentType(MediaType.APPLICATION_JSON))
                .andExpect(status().isForbidden());
    }

    @Test
    void testDeleteUserWithoutAuthNotFoundForbidden() throws Exception {
        mockMvc.perform(delete("/api/utilisateur/999")
                .contentType(MediaType.APPLICATION_JSON))
                .andExpect(status().isForbidden());
    }

    @Test
    void testPingWithoutAuthForbidden() throws Exception {
        mockMvc.perform(get("/api/utilisateur/ping")
                .contentType(MediaType.APPLICATION_JSON))
                .andExpect(status().isForbidden());
    }
}