package com.example.backend.controller;

import com.example.backend.entity.Customer;
import com.example.backend.entity.Sale;
import com.example.backend.entity.User;
import com.example.backend.repository.CustomerRepository;
import com.example.backend.repository.SaleRepository;
import com.example.backend.repository.UserRepository;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.MediaType;
import org.springframework.security.test.context.support.WithMockUser;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.transaction.annotation.Transactional;

import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

@SpringBootTest
@AutoConfigureMockMvc
@ActiveProfiles("test")
@Transactional
public class SaleControllerAuthTest {

    private static final Logger logger = LoggerFactory.getLogger(SaleControllerAuthTest.class);

    @Autowired
    private MockMvc mockMvc;

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private CustomerRepository customerRepository;

    @Autowired
    private SaleRepository saleRepository;

    private Sale testSale;

    @BeforeEach
    void setUp() {
        // Nettoyer les données existantes
        saleRepository.deleteAll();
        customerRepository.deleteAll();
        userRepository.deleteAll();

        // Vérifier que la table users est vide
        long userCount = userRepository.count();
        if (userCount > 0) {
            throw new IllegalStateException("La table users n'est pas vide après deleteAll() : " + userCount + " utilisateurs trouvés");
        }

        // Générer un email unique avec un timestamp
        String uniqueEmail = "testuser_" + System.currentTimeMillis() + "@example.com";
        logger.info("Email généré pour l'utilisateur : {}", uniqueEmail);

        // 1. Créez et persistez un User avec un email unique
        User user = new User();
        user.setName("TestUser");
        user.setEmail(uniqueEmail);
        user.setPassword("password");
        userRepository.save(user);
        logger.info("Utilisateur créé avec ID : {}", user.getId());

        // 2. Créez et persistez un Customer avec le User
        Customer customer = new Customer();
        customer.setSurnom("TestCustomer");
        customer.setUser(user);
        customerRepository.save(customer);
        logger.info("Customer créé avec ID : {}", customer.getId());

        // 3. Créez et persistez une Sale
        testSale = new Sale();
        testSale.setTitre("TestSale");
        testSale.setDescription("Description");
        testSale.setCustomer(customer);
        saleRepository.save(testSale);
        logger.info("Sale créée avec ID : {}", testSale.getId());
    }

    @Test
    @WithMockUser(username = "testuser2@example.com", roles = {"USER"})
    void testGetAllSalesWithAuthSuccess() throws Exception {
        logger.info("Exécution de testGetAllSalesWithAuthSuccess");
        mockMvc.perform(get("/api/sale") // Corrigé : /api/sale au lieu de /api/sales
                .contentType(MediaType.APPLICATION_JSON))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$[0].titre").value("TestSale"));
    }

    @Test
    @WithMockUser(username = "testuser2@example.com", roles = {"USER"})
    void testUpdateSaleWithAuthSuccess() throws Exception {
        logger.info("Exécution de testUpdateSaleWithAuthSuccess pour Sale ID : {}", testSale.getId());
        // Corrigé : utiliser "customer_id" au lieu de "customer" pour correspondre à SaleDTO
        String updatedSaleJson = "{\"titre\":\"UpdatedSale\",\"description\":\"Updated Description\",\"customer_id\":" + testSale.getCustomer().getId() + "}";
        logger.info("JSON envoyé : {}", updatedSaleJson);

        mockMvc.perform(put("/api/sale/" + testSale.getId()) // Corrigé : /api/sale
                .contentType(MediaType.APPLICATION_JSON)
                .content(updatedSaleJson))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.titre").value("UpdatedSale"));
    }


    /*
    @Test
    @WithMockUser(username = "testuser@example.com", roles = {"USER"})
    void testUpdateSaleWithAuthNotFound() throws Exception {
        String updatedSaleJson = "{\"titre\":\"UpdatedSale\",\"description\":\"Updated Description\",\"customer\":{\"id\":" + testSale.getCustomer().getId() + "}}";

        mockMvc.perform(put("/api/sale/999")
                .contentType(MediaType.APPLICATION_JSON)
                .content(updatedSaleJson))
                .andExpect(status().isNotFound());
    }

    @Test
    @WithMockUser(username = "testuser@example.com", roles = {"USER"})
    void testDeleteSaleWithAuthSuccess() throws Exception {
        mockMvc.perform(delete("/api/sale/" + testSale.getId())
                .contentType(MediaType.APPLICATION_JSON))
                .andExpect(status().isNoContent());
    }

    @Test
    @WithMockUser(username = "testuser@example.com", roles = {"USER"})
    void testDeleteSaleWithAuthNotFound() throws Exception {
        mockMvc.perform(delete("/api/sale/999")
                .contentType(MediaType.APPLICATION_JSON))
                .andExpect(status().isNotFound());
    }*/
}