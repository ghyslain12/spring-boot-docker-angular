package com.example.backend.service;

import com.example.backend.dto.SaleDTO;
import com.example.backend.dto.SaleMaterialResponseDTO;
import com.example.backend.entity.Customer;
import com.example.backend.entity.Material;
import com.example.backend.entity.Sale;
import com.example.backend.repository.CustomerRepository;
import com.example.backend.repository.MaterialRepository;
import com.example.backend.repository.SaleRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDateTime;
import java.util.List;
import java.util.stream.Collectors;

@Service
public class SaleService {
    @Autowired
    private SaleRepository saleRepository;

    @Autowired
    private CustomerRepository customerRepository;

    @Autowired
    private MaterialRepository materialRepository;

    @Transactional(readOnly = true)
    public List<SaleMaterialResponseDTO> getAllSales() {
        List<Sale> sales = saleRepository.findAll();
        return sales.stream()
                .map(SaleMaterialResponseDTO::new)
                .collect(Collectors.toList());
    }

    @Transactional(readOnly = true)
	public SaleMaterialResponseDTO getSaleById(Integer id) {
        Sale sale = saleRepository.findById(id)
                .orElseThrow(() -> new RuntimeException(Sale.class.getSimpleName() + " not found with id: " + id));
        
        return new SaleMaterialResponseDTO(sale);

    }

    @Transactional
    public SaleMaterialResponseDTO createSale(SaleDTO saleDTO) {
        if (saleRepository.existsByTitre(saleDTO.getTitre())) {
            throw new IllegalArgumentException("Une vente avec le titre '" + saleDTO.getTitre() + "' existe déjà.");
        }

        if (saleDTO.getCustomerId() == null) {
            throw new IllegalArgumentException("customer_id cannot be null");
        }

        Customer customer = customerRepository.findById(saleDTO.getCustomerId())
                .orElseThrow(() -> new RuntimeException("Customer not found with id: " + saleDTO.getCustomerId()));

        Sale sale = new Sale();
        sale.setTitre(saleDTO.getTitre());
        sale.setDescription(saleDTO.getDescription());
        sale.setCustomer(customer);
        sale.setCreatedAt(LocalDateTime.now());
        sale.setUpdatedAt(LocalDateTime.now());

        if (saleDTO.getMaterials() != null && !saleDTO.getMaterials().isEmpty()) {
            List<Integer> materialIds = saleDTO.getMaterials().entrySet().stream()
                .filter(entry -> entry.getValue() != null && entry.getValue() && entry.getKey().startsWith("material_"))
                .map(entry -> Integer.parseInt(entry.getKey().substring("material_".length())))
                .collect(Collectors.toList());

            if (!materialIds.isEmpty()) {
                List<Material> materials = materialRepository.findAllById(materialIds);
                for (Material material : materials) {
                    sale.addMaterial(material);
                }
            }
        }

        Sale savedSale = saleRepository.save(sale);
        return new SaleMaterialResponseDTO(savedSale);
    }
    
    @Transactional
    public SaleMaterialResponseDTO updateSale(Integer id, SaleDTO saleDTO) {
        Sale sale = saleRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("Sale not found with id: " + id));

        Customer customer = customerRepository.findById(saleDTO.getCustomerId())
                .orElseThrow(() -> new RuntimeException("Customer not found with id: " + saleDTO.getCustomerId()));

        sale.setTitre(saleDTO.getTitre());
        sale.setDescription(saleDTO.getDescription());
        sale.setCustomer(customer);
        sale.setCreatedAt(LocalDateTime.now());
        sale.setUpdatedAt(LocalDateTime.now());
        Sale savedSale = saleRepository.save(sale);
        
        if (saleDTO.getMaterials() != null) {
            sale.clearMaterials();
            
            if (saleDTO.getMaterials() != null && !saleDTO.getMaterials().isEmpty()) {
                List<Integer> materialIds = saleDTO.getMaterials().entrySet().stream()
                    .filter(entry -> entry.getValue() != null && entry.getValue() && entry.getKey().startsWith("material_"))
                    .map(entry -> Integer.parseInt(entry.getKey().substring("material_".length())))
                    .collect(Collectors.toList());

                List<Material> materials = materialRepository.findAllById(materialIds);
                for (Material material : materials) {
                    sale.addMaterial(material);
                }
            }
        }
        
        return new SaleMaterialResponseDTO(sale);
    }

    public void deleteSale(Integer id) {
        Sale sale = saleRepository.findById(id)
                .orElseThrow(() -> new RuntimeException(Sale.class.getSimpleName() + " not found with id: " + id));
        
        saleRepository.delete(sale);
    }
}